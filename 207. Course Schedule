https://leetcode.com/problems/course-schedule/description/

Time: O(m+n)
Space: O(m+n)

class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        int visited = 0;
        int[] indegree = new int[numCourses];
        Map<Integer, Set<Integer>> adj = new HashMap<>();

        for (int i = 0; i < numCourses; i++) {
            adj.put(i, new HashSet<>());
        }

        for (int[] prerequisite : prerequisites) {
            int dest = prerequisite[0];
            int src = prerequisite[1];
            adj.get(src).add(dest);
            indegree[dest]++;
        }

        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < numCourses; i++) {
            if (indegree[i] == 0) {
                stack.push(i);
            }
        }

        while (!stack.isEmpty()) {
            int node = stack.pop();
            visited++;

            for (int neighbor : adj.get(node)) {
                indegree[neighbor]--;
                if (indegree[neighbor] == 0) {
                    stack.push(neighbor);
                }
            }
        }

        return visited == numCourses;
    }
}
